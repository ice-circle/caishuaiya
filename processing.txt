from __future__ import print_function
import numpy as np
import h5py
from keras.models import model_from_json
from keras.models import load_model
np.random.seed(1258)  # reproducibility
from keras.preprocessing import sequence
from keras.datasets import imdb
import pickle

def encode(s1): #translate
    a = []
    dic = {'A':1,'B':22,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'K':9,
           'L':10,'M':11,'N':12,'P':13,'Q':14,'R':15,'S':16,'T':17,
           'V':18,'W':19,'Y':20,'X':21,'U':23,'J':24,'Z':25,'O':26}
 
    for i in range(len(s1)):
        a.append(dic.get(s1[i]))
    return a

def TrainData(s1: object) -> object:
    seq_line = []
    label_line = []
    for line in open(s1):
        if line != '\n':
            proteinId, seq, label = line.split(',')
            proteinId = proteinId.strip(' \t\r\n')
            seq = seq.strip(' \t\r\n')
            seq_line.append(encode(seq))
            label = label.strip(' \t\r\n')
            label_line.append(str(label))
    return seq_line,label_line
#Data segmentation
def Data_division(str_path, nb_words=None, skip_top=0,
              maxlen=None, test_split=0.15, seed=24,
              start_char=1, oov_char=2, index_from=3):
    X,labels = pickle.load(open(str_path, "rb"))
    np.random.seed(seed)
    np.random.shuffle(X)
    np.random.seed(seed)
    np.random.shuffle(labels)
    if maxlen:
        new_X = []
        new_labels = []
        for x, y in zip(X, labels):
            if len(x) < maxlen:
                new_X.append(x)
                new_labels.append(y)
        X = new_X
        labels = new_labels
    if not X:
        raise Exception('After filtering for sequences shorter than maxlen=' +
                        str(maxlen) + ', no sequence was kept. '
                                      'Increase maxlen.')
    if not nb_words:
        nb_words = max([max(x) for x in X])
    X_train = np.array(X[:int(len(X) * (1 - test_split))])
    y_train = np.array(labels[:int(len(X) * (1 - test_split))])
    X_test = np.array(X[int(len(X) * (1 - test_split)):])
    y_test = np.array(labels[int(len(X) * (1 - test_split)):])
    return (X_train, y_train), (X_test, y_test)